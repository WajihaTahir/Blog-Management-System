{
	"info": {
		"_postman_id": "6fb0a863-2e6a-46e1-be1d-f09e06e067a2",
		"name": "User and Blog Management",
		"description": "This is the documentation for user and blog management system. Please refer to the endpoints below to understand how to use them.\n\nWe need to login to a user first before testing other end point. After the login end point is called the token will be automatically set in the envoirnment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31206205"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var token = jsonData.data.token;",
							"",
							"pm.environment.set(\"authToken\", token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "admin@email.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						"login"
					]
				},
				"description": "Can be used to login as a user. The endpoint requiers email and password. There are two example users that can be tested for different roles.\n\nadmin@email.com (Admin role)\n\nwajiha29@email.com (User role)\n\nPassword for both is: 12345678"
			},
			"response": [
				{
					"name": "LoginUser",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "wajiha29@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5001/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				},
				{
					"name": "LoginAdmin",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/user/users/all",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						"users",
						"all"
					]
				},
				"description": "This is a GET request to get all users that are in the users collection. Only admin can see all users."
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/user/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a GET request to get user information from the end point. Id requires a userid in the url. The user can only get their own profile but the admin can get any profile."
			},
			"response": [
				{
					"name": "GetExampleUser",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/user/665baa14c56a9cef2b195c20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"user",
								"665baa14c56a9cef2b195c20"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "wajiha.test@email.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "username",
							"value": "wajiha.test",
							"type": "text"
						},
						{
							"key": "role",
							"value": "user",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/user/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						"create"
					]
				},
				"description": "This is a POST request, to create a user. It required the following parameters in the body. Only admin can create a new user."
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "wajiha.test",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/user/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a PATCH request to update user profile. The user can update their own profile only but the admin can update any user."
			},
			"response": [
				{
					"name": "UpdateExampleUser",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "wajiha.test1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5001/api/user/665baa14c56a9cef2b195c20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"user",
								"665baa14c56a9cef2b195c20"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{base_url}}/api/user/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a DELETE request, to delete a user. It requires and id in url path. Only admin can delete a user."
			},
			"response": []
		},
		{
			"name": "Get All Blogs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/user/users/all",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"user",
						"users",
						"all"
					]
				},
				"description": "This is a GET request to get all users that are in the users collection. Only admin can see all users."
			},
			"response": []
		},
		{
			"name": "Create Blog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "title",
							"value": "test title",
							"type": "text"
						},
						{
							"key": "content",
							"value": "test content",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/blog/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"blog",
						"create"
					]
				},
				"description": "This is a POST request, to create a new blog. Only users can create a blog. It required both title and content of the blog."
			},
			"response": []
		},
		{
			"name": "Get Blog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blog/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"blog",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a GET request to get a blog. Only user can read the blog. It requires a blog id."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}